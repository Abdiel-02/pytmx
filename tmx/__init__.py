from typing import Dict, Optional, Tuple
from xml.etree import ElementTree
from tmx.error import TmxFileNotFoundError, TmxParseError
from tmx.base import Color
from tmx.model.cast import Cast
from tmx.model.layer import ImageLayer, Layer, ObjectGroup
from tmx.model.tileset import Tileset
from tmx.util import build

class Tmx:
    '''Read tmx file generated by Tiled'''

    def __init__(self, file: str):
        try:
            self._map = ElementTree.parse(file).getroot()
        except FileNotFoundError as ex:
            raise TmxFileNotFoundError(ex.filename)
        except ElementTree.ParseError as ex:
            raise TmxParseError(ex)
    
    @property
    def version(self) -> Optional[str]:
        return self._map.attrib.get("version", None)

    @property
    def tiledversion(self) -> Optional[str]:
        return self._map.attrib.get("tiledversion", None)

    @property
    def width(self) -> Optional[int]:
        return int(self._map.attrib.get("width", None))

    @property
    def height(self) -> Optional[int]:
        return int(self._map.attrib.get("height", None))
    
    @property
    def tilewidth(self) -> Optional[int]:
        return int(self._map.attrib.get("tilewidth", None))
    
    @property
    def tileheight(self) -> Optional[int]:
        return int(self._map.attrib.get("tileheight", None))

    @property
    def renderorder(self) -> str:
        return self._map.attrib.get("renderorder")

    @property
    def infinite(self) -> bool:
        return bool(int(self._map.attrib.get("infinite")))

    @property
    def backgroundcolor(self) -> Optional[Color]:
        return Color(self._map.attrib.get("backgroundcolor")) \
            if self._map.attrib.get("backgroundcolor", None) != None \
            else None

    @property
    def properties(self) -> Optional[Dict[str, str]]:
        return {
            prop.attrib.get("name"):prop.attrib.get("value")
            for prop in self._map.find("properties").iter("property")
        } if self._map.find("properties") != None else None

    def get_tilesets(self, path: str) -> Tuple[Tileset]:
        result = [Tileset(data, path) for data in self._map.findall("tileset")]
        if len(result) > 0: return tuple(result)
        else: return None

    def get_layers(self) -> Optional[Tuple[Layer]]:
        result = [Layer(data) for data in self._map.findall("layer")]
        if len(result) > 0: return tuple(result)
        else: return None

    def get_objectGroups(self) -> Optional[Tuple[ObjectGroup]]:
        result = [ObjectGroup(data) for data in self._map.findall("objectgroup")]
        if len(result) > 0: return tuple(result)
        else: return None

    def get_imageLayers(self) -> Optional[Tuple[ImageLayer]]:
        result = [ImageLayer(data) for data in self._map.findall("imagelayer")]
        if len(result) > 0: return tuple(result)
        else: return None

    def casting(self, layer: Layer) -> Tuple[Cast]:
        return build(layer, self.tilesets, self.tilewidth, self.tileheight)
    